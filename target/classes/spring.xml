<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	">
    <!-- 在spring中配置shiro -->
    <!-- 1.配置securityManager！ -->
    <!-- 安全管理器 -->
    <bean id="securityManager"
          class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--		<property name="sessionMode" value="native" />-->
        <!--		单个realm-->
        <!--		<property name="realm" ref="jdbcRealm" />-->
        <!--多个realm-->
        <property name="authenticator" ref="authenticator"/>
        <property name="realms">
            <list>
                <ref bean="fristRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property>
        <!-- <property name="cacheManager" ref="cacheManager" /> -->
    </bean>
    <!-- 2.配置cacheManager 2.1需要加入ehcache的jar包 2.2 -->
    <!-- <bean id="cacheManager"
        class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile"
            value="classpath:spring-cache.xml"></property>
    </bean> -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!-- 两套realm 应用场景:-->
        <!-- 1. 在输入账户的时候 提示 ： 请输入 用户名 /手机号  系统会自动判定登录 同一个 账号-->
        <!-- 2. 或其他 -->
        <!-- 之所以把这个地方注释掉 是因为 读取授权信息 是从securityManager 中读取的  放在这里 没有意义 -->
        <!-- <property name="realms">
            <list>
                <ref bean="fristRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property> -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"/>
        </property>
    </bean>
    <!-- 3.配置Realm 3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的bean -->
    <bean id="fristRealm" class="top.piao888.shiro.realms.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property>
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>
    <!--配置多realm-->
    <bean id="secondRealm" class="top.piao888.shiro.realms.SecondRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"></property>
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>
    <!-- 4.配置 lifecycleBeanPostProcessor。可以自定义的来调用配置在Spring Ioc容器中 shiro Bean
        的生命周期方法 -->
    <bean id="lifecycleBeanPostProcessor"
          class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
    <!-- 启用IOC容器中使用shiro的注解。但必须在配置 lifecycleBeanPostProcessor 才可以使用 -->
    <bean
            class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
            depends-on="lifecycleBeanPostProcessor"/>
    <bean
            class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"></property>
    </bean>
    <!-- 6.配置ShioFilter shiroFilter
         6.1 id必须和web.xml 文件中配置的 DelegatingFilterProxy
            的<filter-name>一致 若不一致 则会抛出 NoSuchBeanDefinitionException。 因为shiro 会来IOC 容器中查找和<filter-name> 名字对应的filter bean
         6.2
         -->
    <bean id="shiroFilter"
          class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"></property>
        <property name="loginUrl" value="/login.jsp"></property>
        <property name="successUrl" value="/index.jsp"></property>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"></property>
        <!--
        非常重要
        配置 哪些页面需要受保护
        以及访问哪些页面需要的权限(类似于过滤器)
        1). anon 可以被匿名访问
        2). authc 必须认证（即登录）后才可以访问的页面
        3). 格式  url = 拦截器[参数]
        4). url使用ant风格模式 支持?,*,** 注意通配符 不包含分隔符 '/'  1. ？匹配一个字符   2. * 匹配0个或多个 字符串  3. ** 匹配路径中的零个或多个路径
            例如：/admin?   匹配 /admin1 或/admin2  但不匹配  /admin 与 /admin/
                /admin*   匹配 /admin1 或/admin12  或  /admin 但不匹配 /admin/1
                /**   匹配  所有路径  /admin 或/admin/1  或/admin/1/2
        5). URL的配置采取第一次匹配优先的方式  即： 如果 先配置了 /** = authc  再配置 /user.jsp = anon， 那么对于  user.jsp 页面的配置将不起作用 。他会先匹配/** 从而不读取user.jsp的配置
        6). logout 登出过滤器
         -->
        <!-- <property name="filterChainDefinitions">
            <value>
                /login.jsp=anon
                /shiro/login=anon
                /shiro/logout=logout
                /admin.jsp=roles[admin]
                /user.jsp=roles[user]
                /** = authc
                /user.jsp = anon
            </value>
        </property> -->
        <!-- 数据库查询的方式 获取授权 -->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>
    </bean>
    <!-- 配置一个bean,该bean实际上是一个Map,通过实例工厂方法的方式 -->
    <bean name="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="builderFilterChainDefinitionMap"/>
    <bean name="filterChainDefinitionMapBuilder" class="top.piao888.shiro.factory.FilterChainDefinitionMapBuilder"/>
</beans>