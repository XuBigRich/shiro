<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	">
	<!-- 在spring中配置shiro -->
	<!-- 1.配置securityManager！ -->
	<!-- 安全管理器 -->
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="jdbcRealm" />
		<property name="sessionMode" value="native" />
		<!-- <property name="cacheManager" ref="cacheManager" /> -->
	</bean>
	<!-- 2.配置cacheManager 2.1需要加入ehcache的jar包 2.2 -->
	<!-- <bean id="cacheManager"
		class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile"
			value="classpath:spring-cache.xml"></property>
	</bean> -->
	<!-- 3.配置Realm 3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的bean -->
	<bean id="jdbcRealm" class="top.piao888.shiro.realms.ShiroRealm"></bean>
	<!-- 4.配置 lifecycleBeanPostProcessor。可以自定义的来调用配置在Spring Ioc容器中 shiro Bean 
		的生命周期方法 -->
	<bean id="lifecycleBeanPostProcessor"
		class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	<!-- 启用IOC容器中使用shiro的注解。但必须在配置 lifecycleBeanPostProcessor 才可以使用 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>
	<!-- 6.配置ShioFilter shiroFilter 
	6.1 id必须和web.xml 文件中配置的 DelegatingFilterProxy 
		的<filter-name>一致 若不一致 则会抛出 NoSuchBeanDefinitionException。 因为shiro 会来IOC 容器中查找和<filter-name> 名字对应的filter bean
		 6.2 
		 -->
	<bean id="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<property name="loginUrl" value="/login.jsp"></property>
		<property name="successUrl" value="/index.jsp"></property>
		<property name="unauthorizedUrl" value="/unauthorized.jsp"></property>
		<!-- 
		非常重要
		配置 哪些页面需要受保护
		以及访问哪些页面需要的权限(类似于过滤器)
		1）. anon 可以被匿名访问
		2）.authc 必须认证（即登录）后才可以访问的页面
		 -->
		<property name="filterChainDefinitions">
			<value>
				/login.jsp=anon
				/user.jsp = authc
			</value>
		</property>
	</bean>
</beans>